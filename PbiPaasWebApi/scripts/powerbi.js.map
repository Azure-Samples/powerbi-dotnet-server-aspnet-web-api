{"version":3,"sources":["webpack:///webpack/bootstrap 0825b09529561f07df80","webpack:///./src/powerbi.ts","webpack:///./src/core.ts","webpack:///./src/embed.ts","webpack:///./src/util.ts","webpack:///./src/report.ts","webpack:///./src/tile.ts"],"names":[],"mappings":"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","file":"powerbi.js","sourcesContent":[" \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId])\n \t\t\treturn installedModules[moduleId].exports;\n\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\texports: {},\n \t\t\tid: moduleId,\n \t\t\tloaded: false\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.loaded = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(0);\n\n\n\n/** WEBPACK FOOTER **\n ** webpack/bootstrap 0825b09529561f07df80\n **/","import { PowerBi } from './core';\r\n\r\ndeclare global {\r\n    interface Window {\r\n        Powerbi: typeof PowerBi;\r\n        powerbi: PowerBi;\r\n    }\r\n}\r\n\r\n/**\r\n * Make PowerBi available on global object for use in apps without module loading support.\r\n * Save class to allow creating an instance of the service.\r\n * Create instance of class with default config for normal usage.\r\n */\r\nwindow.Powerbi = PowerBi;\r\nwindow.powerbi = new PowerBi();\n\n\n/** WEBPACK FOOTER **\n ** ./src/powerbi.ts\n **/","import { Embed, IEmbedConstructor, IEmbedOptions } from './embed';\r\nimport { Report } from './report';\r\nimport { Tile } from './tile';\r\nimport { Utils } from './util';\r\n\r\nexport interface IPowerBiElement extends HTMLElement {\r\n    powerBiEmbed: Embed;\r\n}\r\n\r\nexport interface IPowerBiConfiguration {\r\n    autoEmbedOnContentLoaded?: boolean;\r\n    onError?: (error: any) => any;\r\n}\r\n\r\nexport class PowerBi {\r\n    /**\r\n     * List of components this service can embed.\r\n     */\r\n    private static components: IEmbedConstructor[] = [\r\n        Tile,\r\n        Report\r\n    ];\r\n    /**\r\n     * Mapping of event names from iframe postMessage to their name percieved by parent DOM.\r\n     * Example: User clicks on embeded report which is inside iframe. The iframe code resends \r\n     * event as postMessage with { event: 'reportClicked', ... } and this name is converted to hyphenated\r\n     * name and dispatched from the parent element of the iframe to simulate the event bubbling through two\r\n     * different windows / DOMs\r\n     */\r\n    private static eventMap = {\r\n        'tileClicked': 'tile-click',\r\n        'tileLoaded': 'tile-load',\r\n        'reportPageLoaded': 'report-load'\r\n    };\r\n    \r\n    /**\r\n     * Default configuration for service.\r\n     */\r\n    private static defaultConfig: IPowerBiConfiguration = {\r\n        autoEmbedOnContentLoaded: false,\r\n        onError: (...args) => console.log(args[0], args.slice(1))\r\n    };\r\n\r\n    /** Save access token as fallback/global token to use when local token for report/tile is not provided. */\r\n    accessToken: string;\r\n    \r\n    /** Configuration object */\r\n    private config: IPowerBiConfiguration;\r\n    \r\n    /** List of components (Reports/Tiles) that have been embedded using this service instance. */\r\n    private embeds: Embed[];\r\n    \r\n    constructor(config: IPowerBiConfiguration = {}) {\r\n        this.embeds = [];\r\n        window.addEventListener('message', this.onReceiveMessage.bind(this), false);\r\n        \r\n        // TODO: Change when Object.assign is available.\r\n        this.config = Utils.assign({}, PowerBi.defaultConfig, config);\r\n        \r\n        if (this.config.autoEmbedOnContentLoaded) {\r\n            this.enableAutoEmbed();\r\n        }\r\n    }\r\n    \r\n    /**\r\n     * Handler for DOMContentLoaded which searches DOM for elements having 'powerbi-embed-url' attribute\r\n     * and automatically attempts to embed a powerbi component based on information from the attributes.\r\n     * Only runs if `config.autoEmbedOnContentLoaded` is true when the service is created.\r\n     */\r\n    init(container?: HTMLElement): void {\r\n        container = (container && container instanceof HTMLElement) ? container : document.body;\r\n        \r\n        const elements = Array.prototype.slice.call(container.querySelectorAll(`[${Embed.embedUrlAttribute}]`));\r\n        elements.forEach(element => this.embed(element));\r\n    }\r\n    \r\n    /**\r\n     * Given an html element embed component based on configuration.\r\n     * If component has already been created and attached to element re-use component instance and existing iframe,\r\n     * otherwise create a new component instance\r\n     */\r\n    embed(element: HTMLElement, config: IEmbedOptions = {}): Embed {\r\n        let component: Embed;\r\n        let powerBiElement = <IPowerBiElement>element;\r\n        \r\n        if (powerBiElement.powerBiEmbed) {\r\n            component = this.embedExisting(powerBiElement, config);\r\n        }\r\n        else {\r\n            component = this.embedNew(powerBiElement, config);\r\n        }\r\n        \r\n        return component;\r\n    }\r\n    \r\n    /**\r\n     * Given an html element embed component base configuration.\r\n     * Save component instance on element for later lookup. \r\n     */\r\n    private embedNew(element: IPowerBiElement, config: IEmbedOptions): Embed {\r\n        const componentType = config.type || element.getAttribute(Embed.typeAttribute);\r\n        if (!componentType) {\r\n            throw new Error(`Attempted to embed using config ${JSON.stringify(config)} on element ${element.outerHTML}, but could not determine what type of component to embed. You must specify a type in the configuration or as an attribute such as '${Embed.typeAttribute}=\"${Report.name.toLowerCase()}\"'.`);\r\n        }\r\n        \r\n        // Save type on configuration so it can be referenced later at known location\r\n        config.type = componentType;\r\n        \r\n        const Component = Utils.find(component => componentType === component.name.toLowerCase(), PowerBi.components);\r\n        if (!Component) {\r\n            throw new Error(`Attempted to embed component of type: ${componentType} but did not find any matching component.  Please verify the type you specified is intended.`);\r\n        }\r\n        \r\n        // TODO: Consider removing in favor of passing reference to `this` in constructor\r\n        // The getGlobalAccessToken function is only here so that the components (Tile | Report) can get the global access token without needing reference\r\n        // to the service that they are registered within becaues it creates circular dependencies\r\n        config.getGlobalAccessToken = () => this.accessToken;\r\n        \r\n        const component = new Component(element, config);\r\n        element.powerBiEmbed = component;\r\n        this.embeds.push(component);\r\n        \r\n        return component;\r\n    }\r\n    \r\n    private embedExisting(element: IPowerBiElement, config: IEmbedOptions): Embed {\r\n        const component = Utils.find(x => x.element === element, this.embeds);\r\n        if (!component) {\r\n            throw new Error(`Attempted to embed using config ${JSON.stringify(config)} on element ${element.outerHTML} which already has embedded comopnent associated, but could not find the existing comopnent in the list of active components. This could indicate the embeds list is out of sync with the DOM, or the component is referencing the incorrect HTML element.`);\r\n        }\r\n        \r\n        component.load(config, true);\r\n        \r\n        return component;\r\n    }\r\n    \r\n    /**\r\n     * Adds event handler for DOMContentLoaded which finds all elements in DOM with attribute powerbi-embed-url\r\n     * then attempts to initiate the embed process based on data from other powerbi-* attributes.\r\n     * (This is usually only useful for applications rendered on by the server since all the data needed will be available by the time the handler is called.)\r\n     */\r\n    enableAutoEmbed() {\r\n        window.addEventListener('DOMContentLoaded', (event: Event) => this.init(document.body), false);\r\n    }\r\n    \r\n    /**\r\n     * Returns instance of component associated with element.\r\n     */\r\n    get(element: HTMLElement) {\r\n        const powerBiElement = <IPowerBiElement>element;\r\n        \r\n        if (!powerBiElement.powerBiEmbed) {\r\n            throw new Error(`You attempted to get an instance of powerbi component associated with element: ${element.outerHTML} but there was no associated instance.`);\r\n        }\r\n        \r\n        return powerBiElement.powerBiEmbed;\r\n    }\r\n    \r\n    /**\r\n     * Given an html element which has component embedded within it, remove the component from list of embeds, remove association with component, and remove the iframe.\r\n     */\r\n    reset(element: HTMLElement) {\r\n        const powerBiElement = <IPowerBiElement>element;\r\n        \r\n        if (!powerBiElement.powerBiEmbed) {\r\n            return;\r\n        }\r\n        \r\n        /** Remove component from internal list */\r\n        Utils.remove(x => x === powerBiElement.powerBiEmbed, this.embeds);\r\n        /** Delete property from html element */\r\n        delete powerBiElement.powerBiEmbed;\r\n        /** Remove iframe from element */\r\n        const iframe = element.querySelector('iframe');\r\n        if(iframe) {\r\n            iframe.remove();\r\n        }\r\n    }\r\n    \r\n    /**\r\n     * Handler for window message event.\r\n     * Parses event data as json and if it came from an iframe that matches one from an existing embeded component re-dispatches the event on the iframe's parent element\r\n     * to simulate the event bubbling through the two separate windows / DOMs.\r\n     * \r\n     * If an error occurs when parsing event.data call error handler provided during configuration.\r\n     */\r\n    private onReceiveMessage(event: MessageEvent): void {\r\n        if (!event) {\r\n            return;\r\n        }\r\n\r\n        try {\r\n            // Only raise the event on the embed that matches the post message origin\r\n            const embed = Utils.find(embed => event.source === embed.iframe.contentWindow, this.embeds);\r\n            if(embed) {\r\n                let messageData = typeof event.data === 'string' ? JSON.parse(event.data) : event.data;\r\n                Utils.raiseCustomEvent(embed.element, PowerBi.eventMap[messageData.event], messageData);\r\n            }\r\n        }\r\n        catch (e) {\r\n            if (typeof this.config.onError === 'function') {\r\n                this.config.onError.call(window, e);\r\n            }\r\n            else {\r\n                throw e;\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\n// export default PowerBi;\n\n\n/** WEBPACK FOOTER **\n ** ./src/core.ts\n **/","import { Utils } from './util';\r\n\r\ndeclare global {\r\n    interface Document {\r\n        // Mozilla Fullscreen\r\n        mozCancelFullScreen: Function;\r\n        \r\n        // Ms Fullscreen\r\n        msExitFullscreen: Function;\r\n    }\r\n    \r\n    interface HTMLIFrameElement {\r\n        // Mozilla Fullscreen\r\n        mozRequestFullScreen: Function;\r\n        \r\n        // Ms Fullscreen\r\n        msRequestFullscreen: Function;\r\n    }\r\n}\r\n\r\nexport interface ILoadMessage {\r\n    action: string;\r\n    accessToken: string;\r\n}\r\n\r\nexport interface IEmbedOptions {\r\n    type?: string;\r\n    id?: string;\r\n    accessToken?: string;\r\n    embedUrl?: string;\r\n    webUrl?: string;\r\n    name?: string;\r\n    filterPaneEnabled?: boolean;\r\n    getGlobalAccessToken?: () => string;\r\n}\r\n\r\nexport interface IEmbedConstructor {\r\n    new(...args: any[]): Embed;\r\n}\r\n\r\nexport abstract class Embed {\r\n    public static embedUrlAttribute = 'powerbi-embed-url';\r\n    public static accessTokenAttribute = 'powerbi-access-token';\r\n    public static typeAttribute = 'powerbi-type';\r\n    \r\n    /**\r\n     * Attribute used to specify type of visual.\r\n     * Example: `<div powerbi-type=\"report\"></div>`\r\n     */\r\n    public static name: string;\r\n    /**\r\n     * Default options for embeddable component.\r\n     */\r\n    private static defaultOptions: IEmbedOptions = {\r\n        filterPaneEnabled: true\r\n    };\r\n    \r\n    element: HTMLElement;\r\n    iframe: HTMLIFrameElement;\r\n    options: IEmbedOptions;\r\n    \r\n    constructor(element: HTMLElement, options: IEmbedOptions) {\r\n        this.element = element;\r\n        \r\n        // TODO: Change when Object.assign is available.\r\n        this.options = Utils.assign({}, Embed.defaultOptions, options);\r\n        this.options.accessToken = this.getAccessToken();\r\n        this.options.embedUrl = this.getEmbedUrl();\r\n        \r\n        const iframeHtml = `<iframe style=\"width:100%;height:100%;\" src=\"${this.options.embedUrl}\" scrolling=\"no\" allowfullscreen=\"true\"></iframe>`;\r\n        \r\n        this.element.innerHTML = iframeHtml;\r\n        this.iframe = <HTMLIFrameElement>this.element.childNodes[0];\r\n        this.iframe.addEventListener('load', () => this.load(this.options, false), false);\r\n    }\r\n    \r\n    /**\r\n     * Handler for when the iframe has finished loading the powerbi placeholder page.\r\n     * This is used to inject configuration options such as access token, loadAction, etc\r\n     * which allow iframe to load the actual report with authentication.\r\n     */\r\n    load(options: IEmbedOptions, requireId: boolean = false, message: ILoadMessage = null) {\r\n        if(!message) {\r\n            throw new Error(`You called load without providing message properties from the concrete embeddable class.`);\r\n        }\r\n        \r\n        const baseMessage = <ILoadMessage>{\r\n            accessToken: options.accessToken\r\n        };\r\n        \r\n        Utils.assign(message, baseMessage);\r\n        \r\n        const event = {\r\n            message\r\n        };\r\n        \r\n        Utils.raiseCustomEvent(this.element, event.message.action, event);\r\n        this.iframe.contentWindow.postMessage(JSON.stringify(event.message), '*');\r\n    }\r\n    \r\n    /**\r\n     * Get access token from first available location: options, attribute, global.\r\n     */\r\n    private getAccessToken(): string {\r\n        const accessToken = this.options.accessToken || this.element.getAttribute(Embed.accessTokenAttribute) || this.options.getGlobalAccessToken();\r\n        \r\n        if (!accessToken) {\r\n            throw new Error(`No access token was found for element. You must specify an access token directly on the element using attribute '${Embed.accessTokenAttribute}' or specify a global token at: powerbi.accessToken.`);\r\n        }\r\n        \r\n        return accessToken;\r\n    }\r\n    \r\n    /**\r\n     * Get embed url from first available location: options, attribute.\r\n     */\r\n    protected getEmbedUrl(): string {\r\n        const embedUrl = this.options.embedUrl || this.element.getAttribute(Embed.embedUrlAttribute);\r\n        \r\n        if(typeof embedUrl !== 'string' || embedUrl.length === 0) {\r\n            throw new Error(`Embed Url is required, but it was not found. You must provide an embed url either as part of embed configuration or as attribute '${Embed.embedUrlAttribute}'.`);\r\n        }\r\n        \r\n        return embedUrl; \r\n    }\r\n\r\n    /**\r\n     * Request the browser to make the components iframe fullscreen.\r\n     */\r\n    fullscreen(): void {\r\n        const requestFullScreen = this.iframe.requestFullscreen || this.iframe.msRequestFullscreen || this.iframe.mozRequestFullScreen || this.iframe.webkitRequestFullscreen;\r\n        requestFullScreen.call(this.iframe);\r\n    }\r\n    \r\n    /**\r\n     * Exit fullscreen.\r\n     */\r\n    exitFullscreen(): void {\r\n        if (!this.isFullscreen(this.iframe)) {\r\n            return;\r\n        }\r\n\r\n        const exitFullscreen = document.exitFullscreen || document.mozCancelFullScreen || document.webkitExitFullscreen || document.msExitFullscreen;\r\n        exitFullscreen.call(document);\r\n    }\r\n    \r\n    /**\r\n     * Return true if iframe is fullscreen,\r\n     * otherwise return false \r\n     */\r\n    private isFullscreen(iframe: HTMLIFrameElement): boolean {\r\n        const options = ['fullscreenElement', 'webkitFullscreenElement', 'mozFullscreenScreenElement', 'msFullscreenElement'];\r\n        \r\n        return options.some(option => document[option] === iframe);\r\n    }\r\n}\n\n\n/** WEBPACK FOOTER **\n ** ./src/embed.ts\n **/","export class Utils {\r\n    static raiseCustomEvent(element: HTMLElement, eventName: string, eventData: any) {\r\n        let customEvent;\r\n        if (typeof CustomEvent === 'function') {\r\n            customEvent = new CustomEvent(eventName, {\r\n                detail: eventData,\r\n                bubbles: true,\r\n                cancelable: true\r\n            });\r\n        } else {\r\n            customEvent = document.createEvent('CustomEvent');\r\n            customEvent.initCustomEvent(eventName, true, true, eventData);\r\n        }\r\n\r\n        element.dispatchEvent(customEvent);\r\n        if (customEvent.defaultPrevented || !customEvent.returnValue) {\r\n            return;\r\n        }\r\n\r\n        // TODO: Remove this? Should be better way to handle events than using eval?\r\n        // What is use case? <div powerbi-type=\"report\" onload=\"alert('loaded');\"></div>\r\n        const inlineEventAttr = 'on' + eventName.replace('-', '');\r\n        const inlineScript = element.getAttribute(inlineEventAttr);\r\n        if (inlineScript) {\r\n            eval.call(element, inlineScript);\r\n        }\r\n    }\r\n    \r\n    static findIndex<T>(predicate: (T) => boolean, xs: T[]): number {\r\n        if(!Array.isArray(xs)) {\r\n            throw new Error(`You attempted to call find with second parameter that was not an array. You passed: ${xs}`);\r\n        }\r\n        \r\n        let index;\r\n        xs.some((x, i) => {\r\n            if(predicate(x)) {\r\n                index = i;\r\n                return true;\r\n            }\r\n        });\r\n        \r\n        return index;\r\n    }\r\n    \r\n    static find<T>(predicate: (T) => boolean, xs: T[]): T {\r\n        const index = Utils.findIndex(predicate, xs);\r\n        return xs[index];\r\n    }\r\n    \r\n    static remove<T>(predicate: (T) => boolean, xs: T[]): void {\r\n        const index = Utils.findIndex(predicate, xs);\r\n        xs.splice(index, 1);\r\n    }\r\n    \r\n    // See: https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/assign\r\n    // TODO: replace in favor of using polyfill\r\n    static assign = function (...args) {\r\n        var target = args[0];\r\n        \r\n        'use strict';\r\n        if (target === undefined || target === null) {\r\n            throw new TypeError('Cannot convert undefined or null to object');\r\n        }\r\n\r\n        var output = Object(target);\r\n        for (var index = 1; index < arguments.length; index++) {\r\n            var source = arguments[index];\r\n            if (source !== undefined && source !== null) {\r\n                for (var nextKey in source) {\r\n                    if (source.hasOwnProperty(nextKey)) {\r\n                        output[nextKey] = source[nextKey];\r\n                    }\r\n                }\r\n            }\r\n        }\r\n        return output;\r\n    };\r\n}\n\n\n/** WEBPACK FOOTER **\n ** ./src/util.ts\n **/","import { Embed, IEmbedOptions, ILoadMessage } from './embed';\r\n\r\nexport interface IReportLoadMessage extends ILoadMessage {\r\n    reportId: string\r\n}\r\n\r\nexport class Report extends Embed {\r\n    static name = \"Report\";\r\n    \r\n    getEmbedUrl(): string {\r\n        let embedUrl = super.getEmbedUrl();\r\n        \r\n        // TODO: Need safe way to add url parameters.\r\n        // We are assuming embedUrls use query parameters to supply id of visual\r\n        // so must prefix with '&'.\r\n        if(!this.options.filterPaneEnabled) {\r\n            embedUrl += `&filterPaneEnabled=false`;\r\n        }\r\n\r\n        return embedUrl;\r\n    }\r\n\r\n    load(options: IEmbedOptions, requireId: boolean = false) {\r\n        if(requireId && typeof options.id !== 'string') {\r\n            throw new Error(`id must be specified when loading reports on existing elements.`);\r\n        }\r\n        \r\n        const message: IReportLoadMessage = {\r\n            action: 'loadReport',\r\n            reportId: options.id,\r\n            accessToken: null\r\n        };\r\n        \r\n        super.load(options, requireId, message);\r\n    }\r\n}\n\n\n/** WEBPACK FOOTER **\n ** ./src/report.ts\n **/","import { Embed, IEmbedOptions, ILoadMessage } from './embed';\r\n\r\nexport interface ITileLoadMessage extends ILoadMessage {\r\n    tileId: string\r\n}\r\n\r\nexport class Tile extends Embed {\r\n    static name = \"Tile\";\r\n    \r\n    getEmbedUrl(): string {\r\n        const embedUrl = super.getEmbedUrl();\r\n\r\n        return embedUrl;\r\n    }\r\n    \r\n    load(options: IEmbedOptions, requireId: boolean = false) {\r\n        if(requireId && typeof options.id !== 'string') {\r\n            throw new Error(`id must be specified when loading reports on existing elements.`);\r\n        }\r\n        \r\n        const message = {\r\n            action: 'loadTile',\r\n            tileId: options.id,\r\n            accessToken: null\r\n        };\r\n        \r\n        super.load(options, requireId, message);\r\n    }\r\n}\n\n\n/** WEBPACK FOOTER **\n ** ./src/tile.ts\n **/"],"sourceRoot":""}